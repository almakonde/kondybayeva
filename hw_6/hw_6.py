# -*- coding: utf-8 -*-
"""hw_6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xX13vpNGDyVe4yqEt3l8GQygp6QQdP62

**Навигация по уроку**

1. [Введение в Data Science](https://colab.research.google.com/drive/1OzEE1Y-T_p8rqJHxAm7S8iO76Hx6Jox3)
2. [Практика](https://colab.research.google.com/drive/1sPc9RcTh9oMzyLffhNorD-Hh2kQlMhCC)
3. Домашняя работа

## Задача 1. Книги без буквы E.

**Условие.** В истории литературы известен случай написания романа объемом около
50 тыс. слов, в котором ни разу не была употреблена самая популярная
в английском алфавите буква E. Название его – «Gadsby».
Напишите программу, которая будет считывать список слов из файла и собирать статистику о том, в каком проценте слов используется каждая буква алфавита. Выведите результат для всех 26 букв английского алфавита и отдельно отметьте букву, которая встречалась в словах наиболее редко. В  вашей программе должны игнорироваться знаки препинания и регистр символов.

**Подсказки.**
1. Переведите все слова в верхний регистр:
```
word = word.upper().rstrip() # upper - переводит строку в верхний регистр
```
2. Создайте словарь со счетчиком слов, содержащий каждую букву
```
# Для каждой буквы инициализируем счетчик нулем
counts = {}
for ch in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
       counts[ch] = 0
```
3. Наиболее редко используемое слово можно найти следующим образом:
```
smallest_count = min(counts.values()) # min - возвращает наименьшее число в списке
```
"""

#Напишите свое решение
import string

def read_words(file_path, encoding='utf-8'):
    with open(file_path, 'r', encoding=encoding, errors='replace') as file:
        words = file.read().split()
    return words


def count_letters(words):
    letter_count = {letter: 0 for letter in set(''.join(words).lower()) if letter.isalpha()}
    total_letters = 0

    for word in words:
        word = word.lower()
        for letter in word:
            if letter.isalpha():
                letter_count[letter] += 1
                total_letters += 1

    return letter_count, total_letters

def calculate_percentages(letter_count, total_letters):
    percentages = {letter: count / total_letters * 100 for letter, count in letter_count.items()}
    return percentages

def find_rarest_letter(percentages):
    rarest_letter = min(percentages, key=percentages.get)
    return rarest_letter

def main():
    file_path = 'garri-potter-i-filosofskij-kamen.txt'  # Замените 'your_file.txt' на путь к вашему файлу
    words = read_words(file_path)

    letter_count, total_letters = count_letters(words)
    percentages = calculate_percentages(letter_count, total_letters)

    print("Процент использования каждой буквы:")
    for letter, percentage in sorted(percentages.items()):
        print(f"{letter}: {percentage:.2f}%")

    rarest_letter = find_rarest_letter(percentages)
    print(f"\nБуква, которая встречается наименее часто: {rarest_letter} ({percentages[rarest_letter]:.2f}%)")

if __name__ == "__main__":
    main()

"""## Задание 2. Веб-скрейпинг ИИ новостей

**Описание задания.** Используя пример веб-скрейпинга практической части урока, проведите скрейпинг сайта с новостями из сферы ИИ (https://2051.vision/category/ii/), выведите на экран заголовки новостей.
"""

#Напишите свое решение
!pip install requests beautifulsoup4

import requests
from bs4 import BeautifulSoup

url = 'https://2051.vision/category/ii/'

response = requests.get(url)

if response.status_code == 200:
    soup = BeautifulSoup(response.text, 'html.parser')

    # Находим заголовки новостей
    news_headlines = soup.select('.entry-title a')

    # Выводим заголовки на экран
    for index, headline in enumerate(news_headlines, start=1):
        print(f"{index}. {headline.text.strip()}")

else:
    print(f"Ошибка при получении страницы. Статус код: {response.status_code}")